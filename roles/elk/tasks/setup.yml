- assert:
    that:
     - "kibana_server_name is defined"
     - "elasticsearch_server_name is defined"
     - "elk_letsencrypt_dir is defined"

- name: Add user {{ elk_user }}
  user: name="{{ elk_user }}" shell=/bin/bash

- name: Creates directories
  file: path="{{ item }}" owner="{{ elk_user }}" group="{{ elk_user }}" state=directory
  with_items: "{{ elk_dirs }}"

- name: install passlib
  apt: name=python-passlib

- name: Create kibana htpasswd file {{ kibana_htpasswd_file }}
  htpasswd:
    path: "{{ kibana_htpasswd_file }}"
    name: "{{ kibana_htpasswd_user }}"
    password: "{{ kibana_htpasswd_password }}"
    crypt_scheme: md5_crypt

- name: Generate {{ kibana_server_name }} nginx conf
  template: src="{{ kibana_nginx_template }}" dest={{ kibana_nginx_config_file }}

- name: Create elasticsearch htpasswd file {{ elasticsearch_htpasswd_file }}
  htpasswd:
    path: "{{ elasticsearch_htpasswd_file }}"
    name: "{{ elasticsearch_htpasswd_user }}"
    password: "{{ elasticsearch_htpasswd_password }}"
    crypt_scheme: md5_crypt

- name: Generate {{ elasticsearch_server_name }} nginx conf
  template: src="{{ elasticsearch_nginx_template }}" dest={{ elasticsearch_nginx_config_file }}

- name: Restart nginx
  service: name=nginx state=restarted

- name: Generate {{ elasticsearch_config_file }} elasticsearch conf
  template: src="{{ elasticsearch_config }}" dest={{ elasticsearch_config_file }}

- name: Generate {{ dockerbeat_config_file }} dockerbeat conf
  template: src="{{ dockerbeat_config }}" dest={{ dockerbeat_config_file }}

- name: Generate {{ dockerbeat_template_file }} dockerbeat template
  template: src="{{ dockerbeat_template }}" dest={{ dockerbeat_template_file }}

- name: Generate {{ logstash_config_file }} logstash conf
  template: src="{{ logstash_config }}" dest={{ logstash_config_file }}

- docker_service:
    project_name: "{{ elk_project_name }}"
#    restarted: yes
    recreate: always
    definition:
      version: '2'
      services: "{{ elk_services }}"
